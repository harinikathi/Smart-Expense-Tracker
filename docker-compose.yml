version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - NODE_OPTIONS=--max_old_space_size=2048
    networks:
      - app-network
    depends_on:
      - backend
    volumes:
      - ./frontend:/app:delegated
      - frontend_node_modules:/app/node_modules

  backend:
    build: ./backend
    ports:
      - "5000:5000"
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=auth_db
      - JWT_SECRET=your-secret-key
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-optional}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-optional}
      - NODE_OPTIONS=--max_old_space_size=2048
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app:delegated
      - backend_node_modules:/app/node_modules
    deploy:
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 1024M

  db:
    image: postgres:13-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=auth_db
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  frontend_node_modules:
  backend_node_modules: 